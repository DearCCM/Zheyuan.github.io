import streamlit as st
import lightgbm as lgb
import numpy as np

# Load the AKIprogression model
akiprogression_model = lgb.Booster(model_file='AKI_1_3_APP.txt')

# Define mapping dictionaries

hydragogue_mapping = {"without": 0, "20mg": 1, ">200mg": 2}
gender_mapping = { "female": 0, "male": 1}


def predict_akiprogression_probability(features):
    akiprogression_prob = akiprogression_model.predict(features)
    return akiprogression_prob[0]

def main():
    st.title('Prediction of Acute Kidney Injury Progression Following Acute Type A Aortic Dissection Surgery')

# User selects which content to display
    selected_content = st.radio("", ("Model Introduction", "AKI Progression Prediction"))

    if selected_content == "Model Introduction":
        st.subheader("Model Introduction")
        st.write("This online platform provides prediction for the probability of acute kidney injury  progression from stage 1 or stage 2 to stage 3 after type a acute aortic dissection surgery using a LightGBMmodel.")
        # Disclaimer
        st.subheader("Disclaimer")
        st.write("The predictions generated by this model are based on historical data and statistical patterns, and they may not be entirely accurate or applicable to every individual.")
        st.write("**For Patients:**")
        st.write("- The predictions presented by this platform are intended for informational purposes only and should not be regarded as a substitute for professional medical advice, diagnosis, or treatment.")
        st.write("- Consult with your healthcare provider for personalized medical guidance and decisions concerning your health.")
        st.write("**For Healthcare Professionals:**")
        st.write("- This platform should be considered as a supplementary tool to aid clinical decision-making and should not be the sole determinant of patient care.")
        st.write("- Clinical judgment and expertise should always take precedence in medical practice.")
        st.write("**For Researchers:**")
        st.write("- While this platform can serve as a valuable resource for research purposes, it is crucial to validate its predictions within your specific clinical context and patient population.")
        st.write("- Ensure that your research adheres to all ethical and regulatory standards.")
        st.write("The creators of this online platform and model disclaim any responsibility for decisions or actions taken based on the predictions provided herein. Please use this tool responsibly and always consider individual patient characteristics and clinical context when making medical decisions.")
        st.write("By utilizing this online platform, you agree to the terms and conditions outlined in this disclaimer.")

    elif selected_content == "AKI Progression Prediction":
        st.subheader("AKI Progression Prediction in Patients Following Type A Acute Aortic Dissection Surgery.")

    # Feature input
    features = []

    st.subheader("AKI Progression Features")

    ventilation_time = st.number_input("Ventilation time (h)", value=0.0, format="%.2f")
    hydragogue = st.selectbox("Diuretics", ["without", "20mg", ">200mg"])
    HCO3 = st.number_input("HCO3- (mmol/L)", value=0.0, format="%.2f")
    ALB = st.number_input("Albumin (g/L)", value=0.0, format="%.2f")
    SCR = st.number_input("Scr (μmol/L)", value=0.0, format="%.2f")
    intraoperative_hemorrhage = st.number_input("Intraoperative hemorrhage (ml)", value=0.0, format="%.2f")
    gender = st.selectbox("Gender", ["female", "male"])
    platelet_rich_plasma = st.number_input("Platelet_rich_plasma (ml)", value=0.0, format="%.2f")
    CRP = st.number_input("C-reactive protein (mg/L)", value=0.0, format="%.2f")
    Myocardial_vascularization_time = st.number_input("Myocardial vascularization time (min)", value=0.0, format="%.2f")

    
  

    # 根据用户选择从映射字典中获取相应的数字值
    hydragogue_value = hydragogue_mapping[hydragogue]
    gender_value = gender_mapping[gender]
 
    
    # 将特征添加到列表中
    features.extend([ventilation_time, hydragogue_value, HCO3, ALB, SCR, intraoperative_hemorrhage, gender_value, platelet_rich_plasma, CRP, Myocardial_vascularization_time])
  
    # Create a button to make predictions
    if st.button('Predict AKI Progression Probability'):
        features_array = np.array(features).reshape(1, -1)
        akiprogression_probability = predict_akiprogression_probability(features_array)
        st.write(f'AKI Progression Probability: {akiprogression_probability:.2f}')

if __name__ == '__main__':
    main()

